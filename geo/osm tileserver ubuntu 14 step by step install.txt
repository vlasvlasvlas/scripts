ubuntu14

https://switch2osm.org/serving-tiles/manually-building-a-tile-server-14-04/


- version modificada debajo:

______________________________________




sudo apt-get update

sudo apt-get install vim

intentar denuevo el apt-get anterior.

sudo apt-get install postgresql postgresql-contrib postgis postgresql-9.3-postgis-2.1

sudo -u postgres -i

createuser geouser
createdb -E UTF8 -O geouser gis
exit



sudo useradd -m geouser
sudo passwd geouser (geopassword)


sudo -u postgres psql
\c gis
CREATE EXTENSION postgis;
ALTER TABLE geometry_columns OWNER TO geouser;
ALTER TABLE spatial_ref_sys OWNER TO geouser;
\q
exit




mkdir ~/src
cd ~/src
git clone git://github.com/openstreetmap/osm2pgsql.git
cd osm2pgsql
./autogen.sh
./configure
make
sudo make install



--mapnik camino1
sudo add-apt-repository ppa:mapnik/nightly-2.3
sudo apt-get update
sudo apt-get install libmapnik libmapnik-dev mapnik-utils python-mapnik mapnik-input-plugin-gdal mapnik-input-plugin-ogr mapnik-input-plugin-postgis mapnik-input-plugin-sqlite mapnik-input-plugin-osm

--test
python
>>> import mapnik
>>>

--si da ok el 2do prompt >>> listo. quit()

--Install mod_tile and renderd.Compile the mod_tile source code:
cd ~/src
git clone git://github.com/openstreetmap/mod_tile.git
cd mod_tile
./autogen.sh
./configure
make
sudo make install
sudo make install-mod_tile
sudo ldconfig

--Stylesheet configuration
--osm bright


--download osm bright
mkdir -p /usr/local/share/maps/style
cd /usr/local/share/maps/style
wget https://github.com/mapbox/osm-bright/archive/master.zip
wget http://data.openstreetmapdata.com/simplified-land-polygons-complete-3857.zip
wget http://data.openstreetmapdata.com/land-polygons-split-3857.zip
wget http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_populated_places_simple.zip

--unzip
unzip '*.zip'
mkdir osm-bright-master/shp
mv land-polygons-split-3857 osm-bright-master/shp/
mv simplified-land-polygons-complete-3857 osm-bright-master/shp/
mkdir osm-bright-master/shp/ne_10m_populated_places_simple
mv ne_10m_populated_places_simple.* osm-bright-master/shp/ne_10m_populated_places_simple/


--To improve performance, we create index files for the larger shapefiles:
cd osm-bright-master/shp/land-polygons-split-3857
shapeindex land_polygons.shp
cd ../simplified-land-polygons-complete-3857/
shapeindex simplified_land_polygons.shp
cd ../


--Configuring OSM Bright
--The OSM Bright stylesheet now needs to be adjusted to include the location of our data files. Edit the file osm-bright/osm-bright.osm2pgsql.mml in your favourite text editor, for example:
nano osm-bright/osm-bright.osm2pgsql.mml
--Find the lines with URLs pointing to shapefiles (ending .zip) and replace each one with these appropriate pairs of lines:
"file": "/usr/local/share/maps/style/osm-bright-master/shp/land-polygons-split-3857/land_polygons.shp", 
"type": "shape"
"file": "/usr/local/share/maps/style/osm-bright-master/shp/simplified-land-polygons-complete-3857/simplified_land_polygons.shp", 
"type": "shape",
"file": "/usr/local/share/maps/style/osm-bright-master/shp/ne_10m_populated_places_simple/ne_10m_populated_places_simple.shp", 
"type": "shape"
--Note that we are also adding “type”: “shape” to each one. (If you’re using nano, to save, now press ctrl-X and Y.)
--Finally, in the section dealing with “ne_places”, replace the “srs” and “srs-name” lines with this one line:
"srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"

--revisar no dejar comas sueltas algo,}

--Compiling the stylesheet
--We now have a fully working CartoCSS stylesheet. Before Mapnik can use it, we need to compile it into XML using the command-line carto compiler. First of all, we use OSM Bright’s own preprocessor, which we need to edit for our setup:

cp configure.py.sample configure.py
nano configure.py

--Change the config line pointing to ~/Documents/Mapbox/project to /usr/local/share/maps/style instead, and change dbname from osm to gis. Save and exit.
--Run the pre-processor and then carto:
./make.py
cd ../OSMBright/
carto project.mml > OSMBright.xml

--Setting up your webserver
--Next we need to plug renderd and mod_tile into the Apache webserver, ready to receive file requests.
--Configure renderd
--Change the the renderd settings by editing the /usr/local/etc/renderd.conf and change the following five lines, uncommenting (removing the ‘;’) when required. They are found in the [renderd], [mapnik] and [default] sections.

socketname=/var/run/renderd/renderd.sock
plugins_dir=/usr/local/lib/mapnik/input
font_dir=/usr/share/fonts/truetype/ttf-dejavu
XML=/usr/local/share/maps/style/OSMBright/OSMBright.xml
HOST=localhost

--Create the files required for the mod_tile system to run (remember to change username to your user’s name):

sudo mkdir /var/run/renderd
sudo chown username /var/run/renderd
sudo mkdir /var/lib/mod_tile
sudo chown username /var/lib/mod_tile

--Configure mod_tile
--Next, we need to tell the Apache web server about our new mod_tile installation.
--Using your favourite text editor, create the file /etc/apache2/conf-available/mod_tile.conf and add one line:

LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so


--Apache’s default website configuration file needs to be modified to include mod_tile settings. Modify the file /etc/apache2/sites-available/000-default.conf to include the following lines immediately after the admin e-mail address line:

LoadTileConfigFile /usr/local/etc/renderd.conf
ModTileRenderdSocketName /var/run/renderd/renderd.sock
# Timeout before giving up for a tile to be rendered
ModTileRequestTimeout 0
# Timeout before giving up for a tile to be rendered that is otherwise missing
ModTileMissingRequestTimeout 30

--Tell Apache that you have added the new module, and restart it:

a2enconf mod_tile
service apache2 reload

--Tuning postgresql
--The default configuration for PostgreSQL 9.1 needs to be tuned for the amount of data you are about to add to it. Edit the file /etc/postgresql/9.1/main/postgresql.conf and make the following changes:

shared_buffers = 128MB
checkpoint_segments = 20
maintenance_work_mem = 256MB
autovacuum = off

--These changes require a kernel configuration change, which needs to be applied every time that the computer is rebooted. As root, edit /etc/sysctl.conf and add these lines near the top after the other “kernel” definitions:

# Increase kernel shared memory segments - needed for large databases
kernel.shmmax=268435456

--Reboot your computer. Run this:

sudo sysctl kernel.shmmax

--and verify that it displays as 268435456.

--Loading data into your server
--Get the latest OpenStreetMap data
--Retrieve a piece of OpenStreetMap data in PBF format from http://planet.openstreetmap.org/.
--If you need the entire planet file, you can do it by issuing the following command:

mkdir -p /usr/local/share/maps/argentina
cd /usr/local/share/maps/argentina
--wget http://planet.openstreetmap.org/pbf/planet-latest.osm.pbf
--http://download.geofabrik.de/south-america.html
wget http://download.geofabrik.de/south-america/argentina-latest.osm.pbf

su - postgres

osm2pgsql --slim -d gis  /usr/local/share/maps/argentina/argentina-latest.osm.pbf

"
Completed planet_osm_point
Completed planet_osm_roads
Completed planet_osm_polygon
Completed planet_osm_line
Stopped table: planet_osm_ways
Osm2pgsql took Ns overall
"

--Testing your tileserver
--Now that everything is installed, set-up and loaded, you can start up your tile server and hopefully everything is working. We’ll run it interactively first, just to make sure that everything’s working properly. Remember to substitute your username again:

sudo mkdir /var/run/renderd
sudo chown username /var/run/renderd
sudo -u username renderd -f -c /usr/local/etc/renderd.conf

--and on a different session:

service apache2 reload

--If any FATAL errors occur you’ll need to double-check any edits that you made earlier. If not, try and browse to http://yourserveraddress/osm_tiles/0/0/0.png to see if a small picture of the world appears. The actual map tiles are being created as “metatiles” beneath the folder /var/lib/mod_tile.


----
Setting it to run automatically
If it ran successfully, you can stop the interactive renderd process and configure it to run automatically at machine startup as a daemon.
sudo cp  ~/src/mod_tile/debian/renderd.init /etc/init.d/renderd
sudo chmod u+x /etc/init.d/renderd
Edit the /etc/init.d/renderd file as root – you’ll need to make a couple of changes to the DAEMON and DAEMON_ARGS lines so that they read:
DAEMON=/usr/local/bin/$NAME
DAEMON_ARGS="-c /usr/local/etc/renderd.conf"
Also, you’ll need to change references to www-data so that they match your username – change “www-data” to what you changed “username” to in other files.
You should now be able to start mapnik by doing the following:
sudo /etc/init.d/renderd start
and stop it:
sudo /etc/init.d/renderd stop
Logging information is now written to /var/log/syslog instead of to the terminal.
Next, add a link to the interactive startup directory so that it starts automatically:
sudo ln -s /etc/init.d/renderd /etc/rc2.d/S20renderd
and then restart your server, browse to http://yourserveraddress/osm_tiles/0/0/0.png and everything should be working! You can also go to the page http://yourserveraddress/mod_tile which should give you some stats about your tile server.
Congratulations. Head over to the using tiles section to create a map that uses your new tile server.
